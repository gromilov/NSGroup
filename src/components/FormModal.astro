---
// FormModal.astro
const { className = '' } = Astro.props;
---

<!-- Изначально окно скрыто с помощью opacity-0 и pointer-events-none -->
<div
  id="form-modal"
  class={`fixed inset-0 z-50 flex items-center justify-center p-4 transition-all duration-300 opacity-0 pointer-events-none ${className}`}
  aria-hidden="true"
  aria-modal="true"
  role="dialog"
>
  <!-- Overlay -->
  <div
    class="absolute inset-0 bg-black/50 backdrop-blur-sm modal-overlay"
  ></div>

  <!-- Modal content -->
  <div class="relative z-10 w-full max-w-md bg-white rounded-2xl shadow-xl overflow-hidden modal-content text-black">
    <div class="p-6">
      <!-- Close button -->
      <button
        class="absolute  top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors modal-close"
        aria-label="Закрыть"
        id="modal-close"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      ... содержимое формы ...
    </div>
  </div>
</div>

<script is:inline>
// Глобальные функции для управления модальным окном
window.modalActions = {
  openModal: () => {
    const modal = document.getElementById('form-modal');
    modal.classList.remove('opacity-0', 'pointer-events-none');
    modal.classList.add('opacity-100');
    modal.setAttribute('aria-hidden', 'false');
    document.body.style.overflow = 'hidden'; // Блокируем скролл
    document.dispatchEvent(new CustomEvent('modalOpened'));
  },

  closeModal: () => {
    const modal = document.getElementById('form-modal');
    modal.classList.add('opacity-0', 'pointer-events-none');
    modal.classList.remove('opacity-100');
    modal.setAttribute('aria-hidden', 'true');
    document.body.style.overflow = ''; // Возвращаем скролл
    document.dispatchEvent(new CustomEvent('modalClosed'));
  }
};

// Инициализация после загрузки DOM
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('form-modal');
  const closeButton = document.getElementById('modal-close');



  // Делегирование событий для кнопок открытия
  document.body.addEventListener('click', (e) => {
    if (e.target.closest('.open-form')) {
      e.preventDefault();
      window.modalActions.openModal();
    }
  });

  // Закрытие по клику на оверлей или кнопку закрытия
  modal.addEventListener('click', (e) => {
    // Используем closest для правильного определения клика на крестик
    if (e.target.closest('.modal-close') || e.target.matches('.modal-overlay')) {
      window.modalActions.closeModal();
    }
  });

// Закрытие по клику на оверлей или кнопку закрытия
  closeButton.addEventListener('click', (e) => {
    // Используем closest для правильного определения клика на крестик
    if (e.target.closest('.modal-close') || e.target.matches('.modal-overlay')) {
      window.modalActions.closeModal();
    }
  });

  // Закрытие по ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('pointer-events-none')) {
      window.modalActions.closeModal();
    }
  });

  // Предотвращаем закрытие при клике на содержимое модалки
  modal.querySelector('.modal-content').addEventListener('click', (e) => {
    e.stopPropagation();
  });
});
</script>
<style is:global>
/* Плавная анимация для всего модального окна */
#form-modal {
  transition: opacity 0.3s ease, visibility 0.3s ease;
}
</style>